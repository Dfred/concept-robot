#
# This file is an example configuration file for the lightHead-bot system.
#  In order to parse it using the example script, you can use:
#   LIGHTHEAD_CONF='./lightHead.conf' python ./conf_example.py
# 

DEBUG_MODE = True

#
# Hardware library
#

lib_vision = {
	    'laptop_camera' : {
	       'dev_index': 0,
	       'factors': (.5, .1, .2),
	       'resolution': (320,240) }
}

import math
lib_spine = {
	    'katHD400s_6M' : {
	  	# FOLLOWING IS *ONLY* FOR THE KATANA ARM HD400s_6M
		'AXIS_LIMITS' : (
	 	 #  min    max   factor (encoder value at position pi/2)
         	 (-18300, 31000, -12750/(math.pi/2)),
         	 (-31000,  5900, -23900/(math.pi/2)),   # real 0: -21800
         	 (-31000,  1900,  11850/(math.pi/2)),   # real 0: -14300
         	 ( 14700, 27500,  12800/(math.pi/2)),   # neck x
         	 (    50, 12950,  12900/(math.pi/2)),   # neck y
         	 ( -8000, 15000,  12750/(math.pi/2)) ), # neck z
    		'POSE_REST' : (				# switch_off pose
	 	 None,					# None: use mean value
	 	 5600, 1800, 25100, None, None),
		'SPEED_LIMITS' : (			# speed limits
	 	 (0,255), (1,2) ),			# 1:long accel, 2:short
		}
}

#
# connections
#

#lightHead_server = ('','/tmp/lightHead')	# multiplexed server (default)
lightHead_server = ('localhost', 31337)	# multiplexed server (default)
#expression_server = ('', '/tmp/expression') # expression server address and port
expression_server = ('localhost', 4242) # expression server address and port

#
# submodule definition (also for standlone servers)
#
mod_face  = { 'conn': ('localhost', 4244), 'extra_origins': ('gaze','lips'),
	  'backend' : 'blender'
}
mod_vision= { 'conn': ('localhost', 4247),
	    'haar_cascade' : 'haarcascade_frontalface_alt.xml',
	    'camera' : 'laptop_camera',
}
mod_spine = { 'conn': ('localhost', 4246), 'extra_origins': ('head',),
	  'backend' : 'katHD400s_6M', 'hardware_addr' : '192.168.168.232',
}
mod_gaze  = { 'conn': ('localhost', 4245) }

#
# TODO: MOVE FUNCTION TO COMM
#

def get_unix_sockets(print_flag=False):
    """Try to get unix sockets from the loaded configuration.
    Returns: [ declared_unix_sockets ]
    """
    import sys
    mod = sys.modules[__name__]
    entries=[getattr(mod,c) for c in dir() if c.startswith('conn_')]
    sockets=[port for host, port in entries if type(port) == type("")]
    if print_flag:
        print " ".join(sockets)
    return sockets
