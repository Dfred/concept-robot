#!/usr/bin/python

# Lighthead-bot and this programm is part of a HRI PhD project at
#  the University of Plymouth,
#  a Robotic Animation System including face, eyes, head and other
#  supporting algorithms for vision and basic emotions.  
# Copyright (C) 2010 Frederic Delaunay, frederic.delaunay@plymouth.ac.uk

#  This program is free software: you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation, either version 3 of the
#   License, or (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.

#  You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# Windows users: you need pyreadline from PyPI (http://pypi.python.org/pypi).
#

import threading
import platform
import readline
import logging
import atexit
import sys
import cmd
import os

import comm

# set logging verbosity
# TODO: set it for the module only
logging.basicConfig(level=logging.WARNING, format=comm.FORMAT)

# readline history
try:
    HOME=os.environ["HOME"]
except:
    HOME=''
HISTFILE=os.path.join(HOME, ".comm-cons-clent.history")

ADDR_PORT=None

class myUI(cmd.Cmd):
    def __init__(self):
        self.use_rawinput = platform.system() != 'Windows'
        cmd.Cmd.__init__(self)
        print " - enter 'bye' or press ^D to quit"
        self.cnx = None
        self.done = False

    def default(self, line):
        global ADDR_PORT

        if line.upper() in [ 'EOF', 'BYE' ]:
            if self.cnx:
                print "\n- disconnecting"
                self.cnx.disconnect()
                self.cnx = None
            self.done = True
        elif line.upper() == '!RECO':
            if not self.cnx:
                self.cnx = commConsClient()
                self.cnx.ui = self
                threading.Thread(target=self.cnx.loop_forever,
                                 name='cnx',
                                 args=(ADDR_PORT,)).start()
            else:
                print "\n connection already exists and runs!", self.cnx.status
        elif line and self.cnx and self.cnx.status == "connected":
            self.cnx.send_msg(line)

    def emptyline(self):
        """forget the command when no command is given"""
        pass

    def postcmd(self, stop, line):
        """return True to stop readline thread"""
        return self.done

    def preloop(self):
        self.prompt = "%s> " % (self.cnx and self.cnx.status or '--')

    def redraw_prompt(self):
        self.preloop()
        self.stdout.flush()
        print '\n'+self.prompt,
        self.stdout.flush()


class commConsClient(comm.BaseClient):
    """Our connection to a target server"""

    def __init__(self):
        self.status = "connecting"
        self.ui = None

    def loop_forever(self, addr_port):
        """Process inputs until disconnection"""
        try:
            if self.ui:
                print "\n - connecting to ", addr_port
            comm.BaseClient.__init__(self, addr_port)
            self.connect_and_run(self.ui and .5 or None)
        except comm.error, e:
            print "\n"+str(e)
            self.handle_error()
        finally:
            if self.ui:
                self.ui.cnx = None

    def handle_connect(self):
        """Called when the client has just connected successfully"""
        self.status = "connected"
        if self.ui:
            self.ui.redraw_prompt()

    def handle_disconnect(self):
        self.status = "disconnected"
        self.running = False
        if self.ui:
            self.ui.redraw_prompt()

    def handle_error(self, e):
        print "\n - Communication error:", e,"\n - press enter to finish"
        self.handle_disconnect()

    def handle_timeout(self):
        """Called when timeout waiting for data has expired."""
        if pipe_mode:
            line = sys.stdin.readline()
            while line:
                print sys.argv[0],"sending>", line
                self.send(line)
                line = sys.stdin.readline()
                if self.status == "disconnected":
                    self.running = False
                    return

    def process(self, line):
        """method that handles incoming data (line by line)."""
        if not line:
            return 0
        print "\n", line
        if self.ui:
            self.ui.redraw_prompt()
        return len(line)


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print "[--pipe] address and port not given!"
        exit(-1)

    pipe_mode =  sys.argv[1] == '--pipe' and sys.argv.pop(1)
    port = sys.argv[2].isdigit() and int(sys.argv[2]) or sys.argv[2]
    ADDR_PORT = (sys.argv[1], port)

    cnx = commConsClient()
    if not pipe_mode :
        try:
            readline.read_history_file(HISTFILE)
        except IOError:
            pass
        import atexit
        atexit.register(readline.write_history_file, HISTFILE)

        ui = myUI()
        ui.cnx = cnx
        cnx.ui = ui
        threading.Thread(target=ui.cmdloop, name='UI').start()
    cnx.loop_forever(ADDR_PORT)
