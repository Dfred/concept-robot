#
#  This file is an example configuration file for ARAS driving the LightHead
# robotic system.
#

#  If you experience a crash (ie: an Exception), you can investigate the reasons
# setting VERBOSITY to DEBUG, spawning then the convenient python debugger.
VERBOSITY = 2      # 0: WARNING, 1: INFO, 2: DEBUG    (default is 0)

################################################################################
# Network Connections: Listening IP address , Port
#
# = ('','/tmp/lightHead')	         # using a UNIX socket
# = ('localhost', 31337)		 # using the loopback TCP interface
# = ('192.168.0.3', 31337)		 # using the LAN
################################################################################

#  This software: ARAS (Abstract Robotic Animation System), providing generic
# animation features abstracting hardware design.
#ARAS_server = ('192.168.21.2', 31337)		# Demos
#ARAS_server = ('192.168.56.1', 31337)		# Demos
#ARAS_server = ('10.1.103.23', 31337)		# VM
ARAS_server = ('localhost', 31337)		# local


#CHLAS_server = ('192.168.21.1', 4242)		# Demos
#CHLAS_server = ('10.0.2.15', 4242)		# using VirtualBox Linux
CHLAS_server = ('192.168.56.101', 4242)
expression_server = ('192.168.21.1', 4242)

################################################################################
# Robot configuration
#
#  Hardware configuration is defined by the ROBOT dictionnary.
# This config file shows how to hold multiple robot configurations so to easily
# switch from one to another. e.g: for testing or on hardware failure..
#
#  Some entries refer to the lib_.. modules defined in the hardware library (in
# this file).
################################################################################

PROJ_MATRIX = (
  ( 17.50, -0.30,   .12,    .7 ),
  (- 0.18,  8.91,   .33,   1.9 ),
  (- 0.10,  0.  , -0.10, - 0.2 ),
  (- 0.10, -0.6 ,  1.26,  16.78) 
)

ICUB_FACE_SPINE = {
 'backend'   : 'iCub',
 'yarp_root' : '/icubSim',
 'origins'   : ('face', 'gaze', 'spine')
}
BLENDER_SPINE_SOFT = {
  'backend'     : 'blender',
  'proj_matrix' : PROJ_MATRIX,
  # entry used for registering more protocol keywords for a subserver/handler
  'origins'     : ('face','gaze','spine',),     #XXX ,'lips'), 
#  'comm'        : ('localhost', 4242)		# standalone server info
}
BLENDER_SPINE_HARD = {
  'backend'       : 'blender',
  'proj_matrix'   : PROJ_MATRIX,
  # entry used for registering more protocol keywords for a subserver/handler
  'origins'       : ('spine','gaze','lips'),		
#  'comm'          : ('localhost', 4242)	# standalone server info
}
SPINE = {
  'backend'       : 'katHD400s_6M',
  'origins'       : ('spine',),
  'hardware_addr' : '192.168.168.232',		# the robot arm IP address
  'comm'          : ('localhost', 4243),	# standalone server info
}

#
# Preset, check lib_vision
#
VISION = {
  'sensor'        : 'laptop',
  'remote'        : ('my_host_connected_to_the_robot_camera', 4244),
  'haar_cascade'  : None,			# default or your own file path
}


# Building 2 configuration presets
ROBOT_SOFT = {
  'name'     : 'lightHead',
  'modules'  : (ICUB_FACE_SPINE,), #SPINE,), 
#  'modules'  : (BLENDER_SPINE_SOFT,), 
#  'modules'  : (SPINE,), 
  'vision'   : VISION, 
  'audition' : 'laptop',
}
ROBOT_HARD = {
  'name'      : 'lightHead',
  'modules'   : (BLENDER_SPINE_HARD, ), 
  'vision'    : VISION,
  'mod_spine' : SPINE
}

# Actual configuration
ROBOT = ROBOT_SOFT


################################################################################
# Hardware library
#
# Content is module-dependent
################################################################################

lib_vision = {
  'laptop' : {
	       'dev_index': 0,
	       'XY_factors': (.2, .1),
	       'depth_fct' : "0.105*x**-1.364",
	       'resolution': (320,240)
            }
}

lib_audition = {
  'laptop' : { 'dev_index' : (6,6),	# stereo capable
  	       'ev_threshold': .1,
  	   }
}


# floats are normalized angles
lib_spine = {
  ##
  ## THIS SECTION IS *ONLY* FOR THE KATANA ARM HD400s_6M
  'katHD400s_6M' : {	
	'AXIS_LIMITS' : {			# software axis range
       	 	'TX'  :(-.3 ,  .1 ),
       	 	'TZ'  :(-.5 ,  .5 ),
       	 	'53.5':(-.12 , .6, True),	# extra: inversed rot.
       	 	'55.5':(-.25,  .25),
       	 	'51.5':(-.4 ,  .4, True)
		},
	 # switch_off pose, absolute encoder values
	'POSE_REST' : (6350, 5600, 1800, 24900, None, None),
	 # operating basic pose, taken when system is ready
	'POSE_READY_NEUTRAL': (6350, -8500, -7500, 27300, None, None),
	},
  ##
  ## Purely virtual character
  'blender' : {
	'AXIS_LIMITS' : {
		'51.5' : (-15*0.01745, 15*0.01745),
                '53.5' : (-22*0.01745, 25*0.01745),
                '55.5' : (-15*0.01745, 15*0.01745),
                'TX'   : (-20*0.01745, 30*0.01745),
                'TY'   : (-17*0.01745, 15*0.01745),
                'TZ'   : (-15*0.01745, 15*0.01745),
                'SY'   : (-17*0.01745, 15*0.01745),
                'SZ'   : (-17*0.01745, 15*0.01745)
                }
	},
  ##
  ## iCub robot
  'iCub' : {
	'AXIS_LIMITS' : {
		## iCub v1's neck is under dimensioned, so be gentle.
		'51.5' : (-30*0.01745, 30*0.01745),	## Z, really [-50, 50]
		'53.5' : (-30*0.01745, 20*0.01745),	## X, really [-40, 30]
		'55.5' : (-40*0.01745, 40*0.01745),     ## Y, really [-60, 60]
		## also include camera orientations
		'61.5' : (-50*0.01745, 50*0.01745),
		'63.5' : (-35*0.01745, 15*0.01745)
		},
	'POSE_REST' : (0, 0, 0, 0, 0, 0),
	'POSE_READY_NEUTRAL' : (0, 0, 0, 0, 0)
	}
}
